---
# This template describes a S3 bucket with optional public read access.

AWSTemplateFormatVersion: '2010-09-09'
Description: Create a S3 bucket

Parameters:

  BucketName:
    Description: Optional name of the bucket.
    Type: String
    Default: ''

  Access:
    Description: Access policy of the bucket.
    Type: String
    AllowedValues:
      - Private
      - PublicRead
      - CloudFrontRead
    Default: Private

  Versioning:
    Description: Enable versioning to keep a backup if objects change.
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
      - 'false-but-was-true'
    Default: 'true'

  NoncurrentVersionExpirationInDays:
    Description: Remove non-current object versions after days (set to 0 to disable).
    Type: Number
    MinValue: 0
    Default: 0

  Encryption:
    Description: Enable server side encryption using KMS (customer managed) CMK.
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: S3 Parameters
        Parameters:
          - BucketName
          - Access
          - Versioning
          - NoncurrentVersionExpirationInDays
          - Encryption

Conditions:

  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, false-but-was-true]
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasEncryption: !Equals [!Ref Encryption, true]

Resources:

  Key:
    Condition: HasEncryption
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement: !If
          - HasPublicReadAccess
          - - Effect: Allow
              Principal:
                AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
              Action: 'kms:*'
              Resource: '*'
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - 'kms:Encrypt'
                - 'kms:Decrypt'
                - 'kms:ReEncrypt*'
                - 'kms:GenerateDataKey*'
                - 'kms:DescribeKey'
              Resource: '*'
              Condition:
                StringEquals:
                  'kms:CallerAccount': !Ref 'AWS::AccountId'
                  'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - 'kms:Decrypt'
              Resource: '*'
              Condition:
                StringEquals:
                  'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
          - - Effect: Allow
              Principal:
                AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
              Action: 'kms:*'
              Resource: '*'
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - 'kms:Encrypt'
                - 'kms:Decrypt'
                - 'kms:ReEncrypt*'
                - 'kms:GenerateDataKey*'
                - 'kms:DescribeKey'
              Resource: '*'
              Condition:
                StringEquals:
                  'kms:CallerAccount': !Ref 'AWS::AccountId'
                  'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'

  KeyAlias:
    Condition: HasEncryption
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}
      TargetKeyId: !Ref Key

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: 'Enabled'
          - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
            Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption: !If [HasEncryption, {ServerSideEncryptionConfiguration: [{ServerSideEncryptionByDefault: {KMSMasterKeyID: !Ref Key, SSEAlgorithm: 'aws:kms'}}]}, !Ref 'AWS::NoValue']

  PublicReadBucketPolicy:
    Condition: HasPublicReadAccess
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${Bucket.Arn}/*'

  CloudFrontReadBucketPolicy:
    Condition: HasCloudFrontReadAccess
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub '${Bucket.Arn}/*'

  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Bucket

Outputs:

  StackName:
    Description: Stack name
    Value: !Sub ${AWS::StackName}

  Bucket:
    Description: Name of the bucket
    Value: !Ref Bucket

  DomainName:
    Description: Domain name of the bucket.
    Value: !GetAtt Bucket.DomainName

  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Description: Origin access identity for secure CloudFront access.
    Value: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
