---
# This template describes a S3 bucket with optional public read access.

AWSTemplateFormatVersion: '2010-09-09'
Description: Create a S3 bucket

Parameters:

  BucketName:
    Description: Optional name of the bucket.
    Type: String
    Default: ''

  Access:
    Description: Access policy of the bucket.
    Type: String
    AllowedValues:
      - Private
      - PublicRead
      - CloudFrontRead
      - ElbAccessLogWrite
    Default: Private

  Versioning:
    Description: Enable versioning to keep a backup if objects change.
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
      - 'false-but-was-true'
    Default: 'true'

  NoncurrentVersionExpirationInDays:
    Description: Remove non-current object versions after days (set to 0 to disable).
    Type: Number
    MinValue: 0
    Default: 0

  ExpirationInDays:
    Description: Remove objects after days (set to 0 to disable).
    Type: Number
    MinValue: 0
    Default: 0

  Encryption:
    Description: Enable server side encryption using KMS (customer managed) CMK.
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: S3 Parameters
        Parameters:
          - BucketName
          - Access
          - Versioning
          - NoncurrentVersionExpirationInDays
          - ExpirationInDays
          - Encryption

Conditions:

  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasElbAccessLogWriteAccess: !Equals [!Ref Access, ElbAccessLogWrite]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, false-but-was-true]
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasExpirationInDays: !Not [!Equals [!Ref ExpirationInDays, 0]]
  HasEncryption: !Equals [!Ref Encryption, true]
  NeedsBucketPolicy: !Or
    - !Condition HasPublicReadAccess
    - !Condition HasCloudFrontReadAccess
    - !Condition HasEncryption
    - !Condition HasElbAccessLogWriteAccess

Resources:

  Key:
    Condition: HasEncryption
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub s3.${AWS::Region}.amazonaws.com
          - !If
            - HasPublicReadAccess
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - 'kms:Decrypt'
              Resource: '*'
              Condition:
                StringEquals:
                  'kms:ViaService': !Sub s3.${AWS::Region}.amazonaws.com
            - !Ref 'AWS::NoValue'

  KeyAlias:
    Condition: HasEncryption
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}
      TargetKeyId: !Ref Key

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: 'Enabled'
          - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
            Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
          - ExpirationInDays: !If [HasExpirationInDays, !Ref ExpirationInDays, 1]
            Status: !If [HasExpirationInDays, Enabled, Disabled]
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption: !If
        - HasEncryption
        - ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                KMSMasterKeyID: !Ref Key
                SSEAlgorithm: 'aws:kms'
        - !Ref 'AWS::NoValue'

  BucketPolicy:
    Condition: NeedsBucketPolicy
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - !If
            - HasPublicReadAccess
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Sub ${Bucket.Arn}/*
            - !Ref 'AWS::NoValue'
          - !If
            - HasCloudFrontReadAccess
            - Effect: Allow
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
              Action: 's3:GetObject'
              Resource: !Sub ${Bucket.Arn}/*
            - !Ref 'AWS::NoValue'
          - !If
            - HasElbAccessLogWriteAccess
            - Effect: Allow
              Principal:
                AWS: # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
                  - '127311923021' # us-east-1
                  - '033677994240' # us-east-2
                  - '027434742980' # us-west-1
                  - '797873946194' # us-west-2
                  - '985666609251' # ca-central-1
                  - '054676820928' # eu-central-1
                  - '156460612806' # eu-west-1
                  - '652711504416' # eu-west-2
                  - '009996457667' # eu-west-3
                  - '582318560864' # ap-northeast-1
                  - '600734575887' # ap-northeast-2
                  - '383597477331' # ap-northeast-3
                  - '114774131450' # ap-southeast-1
                  - '783225319266' # ap-southeast-2
                  - '718504428378' # ap-south-1
                  - '507241528517' # sa-east-1
              Action: 's3:PutObject'
              Resource: !Sub ${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*
            - !Ref 'AWS::NoValue'
          - !If
            - HasEncryption
            - Effect: Deny
              Principal: '*'
              Action: 's3:PutObject*'
              Resource: !Sub ${Bucket.Arn}/*
              Condition:
                StringNotEquals:
                  's3:x-amz-server-side-encryption': ''
                  's3:x-amz-server-side-encryption-aws-kms-key-id': !GetAtt Key.Arn
            - !Ref 'AWS::NoValue'

  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Bucket

Outputs:

  StackName:
    Description: Stack name
    Value: !Sub ${AWS::StackName}

  Bucket:
    Description: Name of the bucket
    Value: !Ref Bucket

  DomainName:
    Description: Domain name of the bucket.
    Value: !GetAtt Bucket.DomainName

  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Description: Origin access identity for secure CloudFront access.
    Value: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
